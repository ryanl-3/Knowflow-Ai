generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  projects      Project[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id           String           @id @default(cuid())
  name         String
  description  String?
  userId       String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  lastUsedAt   DateTime         @default(now())
  usageCount   Int              @default(0)
  systemPrompt String?
  documents    Document[]
  messages     Message[]
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabulary   VocabularyWord[]
}

model Document {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Int
  content   String?
  url       String?
  s3Key     String?  @unique
  status    String   @default("UPLOADED")
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model VocabularyWord {
  id         String   @id @default(cuid())
  term       String
  definition String
  projectId  String
  messageId  String?
  documentId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, term])
}

model Message {
  id           String    @id @default(cuid())
  content      String
  role         String
  projectId    String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime?
  editHistory  Json?
  isDeleted    Boolean   @default(false)
  lastEditedAt DateTime?
  metadata     Json?
  updatedAt    DateTime  @default(now()) @updatedAt
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
